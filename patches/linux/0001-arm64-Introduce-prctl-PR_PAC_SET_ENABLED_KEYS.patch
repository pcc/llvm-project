From 2813def2a19cff8dfebd26272abac5588ac0fc03 Mon Sep 17 00:00:00 2001
From: Peter Collingbourne <pcc@google.com>
Date: Thu, 4 Jun 2020 18:39:49 -0700
Subject: [PATCH 1/4] arm64: Introduce prctl(PR_PAC_SET_ENABLED_KEYS)

---
 arch/arm64/include/asm/asm_pointer_auth.h | 19 +++++++++++++++++
 arch/arm64/include/asm/pointer_auth.h     |  8 ++++++--
 arch/arm64/include/asm/processor.h        |  3 +++
 arch/arm64/kernel/asm-offsets.c           |  1 +
 arch/arm64/kernel/pointer_auth.c          | 25 +++++++++++++++++++++++
 include/uapi/linux/prctl.h                |  2 ++
 kernel/sys.c                              |  5 +++++
 7 files changed, 61 insertions(+), 2 deletions(-)

diff --git a/arch/arm64/include/asm/asm_pointer_auth.h b/arch/arm64/include/asm/asm_pointer_auth.h
index ce2a8486992b..bdf7934f71f1 100644
--- a/arch/arm64/include/asm/asm_pointer_auth.h
+++ b/arch/arm64/include/asm/asm_pointer_auth.h
@@ -31,6 +31,14 @@ alternative_else_nop_endif
 	ldp	\tmp2, \tmp3, [\tmp1, #PTRAUTH_USER_KEY_APDB]
 	msr_s	SYS_APDBKEYLO_EL1, \tmp2
 	msr_s	SYS_APDBKEYHI_EL1, \tmp3
+
+	ldr	\tmp2, [\tsk, #THREAD_SCTLR_ENXX_MASK]
+	cbz	\tmp2, .Laddr_auth_skip_\@
+
+	mrs_s	\tmp3, SYS_SCTLR_EL1
+	bic	\tmp3, \tmp3, \tmp2
+	msr_s	SYS_SCTLR_EL1, \tmp3
+
 .Laddr_auth_skip_\@:
 alternative_if ARM64_HAS_GENERIC_AUTH
 	ldp	\tmp2, \tmp3, [\tmp1, #PTRAUTH_USER_KEY_APGA]
@@ -46,6 +54,17 @@ alternative_if ARM64_HAS_ADDRESS_AUTH
 	ldp	\tmp2, \tmp3, [\tmp1, #PTRAUTH_KERNEL_KEY_APIA]
 	msr_s	SYS_APIAKEYLO_EL1, \tmp2
 	msr_s	SYS_APIAKEYHI_EL1, \tmp3
+
+	ldr	\tmp2, [\tsk, #THREAD_SCTLR_ENXX_MASK]
+	cbz	\tmp2, .Lset_sctlr_skip_\@
+
+	mrs_s	\tmp1, SYS_SCTLR_EL1
+	mov	\tmp2, #(SCTLR_ELx_ENIA | SCTLR_ELx_ENIB | SCTLR_ELx_ENDA)
+	movk	\tmp2, #SCTLR_ELx_ENDB
+	orr	\tmp1, \tmp1, \tmp2
+	msr_s	SYS_SCTLR_EL1, \tmp1
+
+.Lset_sctlr_skip_\@:
 	.if     \sync == 1
 	isb
 	.endif
diff --git a/arch/arm64/include/asm/pointer_auth.h b/arch/arm64/include/asm/pointer_auth.h
index 70c47156e54b..27af915d9208 100644
--- a/arch/arm64/include/asm/pointer_auth.h
+++ b/arch/arm64/include/asm/pointer_auth.h
@@ -67,14 +67,17 @@ static __always_inline void ptrauth_keys_switch_kernel(struct ptrauth_keys_kerne
 }
 
 extern int ptrauth_prctl_reset_keys(struct task_struct *tsk, unsigned long arg);
+extern int ptrauth_prctl_set_enabled_keys(struct task_struct *tsk, unsigned long arg);
 
 static inline unsigned long ptrauth_strip_insn_pac(unsigned long ptr)
 {
 	return ptrauth_clear_pac(ptr);
 }
 
-#define ptrauth_thread_init_user(tsk)					\
-	ptrauth_keys_init_user(&(tsk)->thread.keys_user)
+#define ptrauth_thread_init_user(tsk) do {				\
+		ptrauth_keys_init_user(&(tsk)->thread.keys_user);	\
+		(tsk)->thread.sctlr_enxx_mask = 0;			\
+	} while (0)
 #define ptrauth_thread_init_kernel(tsk)					\
 	ptrauth_keys_init_kernel(&(tsk)->thread.keys_kernel)
 #define ptrauth_thread_switch_kernel(tsk)				\
@@ -82,6 +85,7 @@ static inline unsigned long ptrauth_strip_insn_pac(unsigned long ptr)
 
 #else /* CONFIG_ARM64_PTR_AUTH */
 #define ptrauth_prctl_reset_keys(tsk, arg)	(-EINVAL)
+#define ptrauth_prctl_set_enabled_keys(tsk, arg)	(-EINVAL)
 #define ptrauth_strip_insn_pac(lr)	(lr)
 #define ptrauth_thread_init_user(tsk)
 #define ptrauth_thread_init_kernel(tsk)
diff --git a/arch/arm64/include/asm/processor.h b/arch/arm64/include/asm/processor.h
index 996b882a32d9..6cfcd842cfb3 100644
--- a/arch/arm64/include/asm/processor.h
+++ b/arch/arm64/include/asm/processor.h
@@ -150,6 +150,7 @@ struct thread_struct {
 #ifdef CONFIG_ARM64_PTR_AUTH
 	struct ptrauth_keys_user	keys_user;
 	struct ptrauth_keys_kernel	keys_kernel;
+	u64				sctlr_enxx_mask;
 #endif
 #ifdef CONFIG_ARM64_MTE
 	u64			sctlr_tcf0;
@@ -317,6 +318,8 @@ extern void __init minsigstksz_setup(void);
 /* PR_PAC_RESET_KEYS prctl */
 #define PAC_RESET_KEYS(tsk, arg)	ptrauth_prctl_reset_keys(tsk, arg)
 
+#define PAC_SET_ENABLED_KEYS(tsk, arg)	ptrauth_prctl_set_enabled_keys(tsk, arg)
+
 #ifdef CONFIG_ARM64_TAGGED_ADDR_ABI
 /* PR_{SET,GET}_TAGGED_ADDR_CTRL prctl */
 long set_tagged_addr_ctrl(unsigned long arg);
diff --git a/arch/arm64/kernel/asm-offsets.c b/arch/arm64/kernel/asm-offsets.c
index 777a662888ec..c26d11eed18d 100644
--- a/arch/arm64/kernel/asm-offsets.c
+++ b/arch/arm64/kernel/asm-offsets.c
@@ -46,6 +46,7 @@ int main(void)
 #ifdef CONFIG_ARM64_PTR_AUTH
   DEFINE(THREAD_KEYS_USER,	offsetof(struct task_struct, thread.keys_user));
   DEFINE(THREAD_KEYS_KERNEL,	offsetof(struct task_struct, thread.keys_kernel));
+  DEFINE(THREAD_SCTLR_ENXX_MASK,offsetof(struct task_struct, thread.sctlr_enxx_mask));
 #endif
   BLANK();
   DEFINE(S_X0,			offsetof(struct pt_regs, regs[0]));
diff --git a/arch/arm64/kernel/pointer_auth.c b/arch/arm64/kernel/pointer_auth.c
index 1e77736a4f66..7fe5625a5de0 100644
--- a/arch/arm64/kernel/pointer_auth.c
+++ b/arch/arm64/kernel/pointer_auth.c
@@ -42,3 +42,28 @@ int ptrauth_prctl_reset_keys(struct task_struct *tsk, unsigned long arg)
 
 	return 0;
 }
+
+int ptrauth_prctl_set_enabled_keys(struct task_struct *tsk, unsigned long arg)
+{
+	u64 sctlr_enxx_mask = 0;
+	unsigned long addr_key_mask = PR_PAC_APIAKEY | PR_PAC_APIBKEY |
+				      PR_PAC_APDAKEY | PR_PAC_APDBKEY;
+
+	if (!system_supports_address_auth())
+		return -EINVAL;
+
+	if (arg & ~addr_key_mask)
+		return -EINVAL;
+
+	if (!(arg & PR_PAC_APIAKEY))
+		sctlr_enxx_mask |= SCTLR_ELx_ENIA;
+	if (!(arg & PR_PAC_APIBKEY))
+		sctlr_enxx_mask |= SCTLR_ELx_ENIB;
+	if (!(arg & PR_PAC_APDAKEY))
+		sctlr_enxx_mask |= SCTLR_ELx_ENDA;
+	if (!(arg & PR_PAC_APDBKEY))
+		sctlr_enxx_mask |= SCTLR_ELx_ENDB;
+
+	tsk->thread.sctlr_enxx_mask = sctlr_enxx_mask;
+	return 0;
+}
diff --git a/include/uapi/linux/prctl.h b/include/uapi/linux/prctl.h
index c190e220ff67..2a2a114651bf 100644
--- a/include/uapi/linux/prctl.h
+++ b/include/uapi/linux/prctl.h
@@ -247,6 +247,8 @@ struct prctl_mm_map {
 #define PR_SET_IO_FLUSHER		57
 #define PR_GET_IO_FLUSHER		58
 
+#define PR_PAC_SET_ENABLED_KEYS		59
+
 #define PR_SET_VMA		0x53564d41
 # define PR_SET_VMA_ANON_NAME		0
 
diff --git a/kernel/sys.c b/kernel/sys.c
index 6bc2125bb0ea..34829d2c01fb 100644
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -2633,6 +2633,11 @@ SYSCALL_DEFINE5(prctl, int, option, unsigned long, arg2, unsigned long, arg3,
 			return -EINVAL;
 		error = PAC_RESET_KEYS(me, arg2);
 		break;
+	case PR_PAC_SET_ENABLED_KEYS:
+		if (arg3 || arg4 || arg5)
+			return -EINVAL;
+		error = PAC_SET_ENABLED_KEYS(me, arg2);
+		break;
 	case PR_SET_TAGGED_ADDR_CTRL:
 		if (arg3 || arg4 || arg5)
 			return -EINVAL;
-- 
2.27.0.212.ge8ba1cc988-goog

