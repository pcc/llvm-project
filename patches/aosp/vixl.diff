diff --git a/src/aarch64/assembler-aarch64.cc b/src/aarch64/assembler-aarch64.cc
index 9e73ffaa..136f787f 100644
--- a/src/aarch64/assembler-aarch64.cc
+++ b/src/aarch64/assembler-aarch64.cc
@@ -196,7 +196,7 @@ void Assembler::ret(const Register& xn) {
 
 
 void Assembler::braaz(const Register& xn) {
-  VIXL_ASSERT(CPUHas(CPUFeatures::kPAuth));
+  // VIXL_ASSERT(CPUHas(CPUFeatures::kPAuth));
   VIXL_ASSERT(xn.Is64Bits());
   Emit(BRAAZ | Rn(xn) | Rd_mask);
 }
@@ -208,7 +208,7 @@ void Assembler::brabz(const Register& xn) {
 }
 
 void Assembler::blraaz(const Register& xn) {
-  VIXL_ASSERT(CPUHas(CPUFeatures::kPAuth));
+  // VIXL_ASSERT(CPUHas(CPUFeatures::kPAuth));
   VIXL_ASSERT(xn.Is64Bits());
   Emit(BLRAAZ | Rn(xn) | Rd_mask);
 }
@@ -1046,25 +1046,21 @@ void Assembler::cls(const Register& rd, const Register& rn) {
 
 #define DEFINE_ASM_FUNCS(PRE, OP)                                  \
   void Assembler::PRE##a(const Register& xd, const Register& xn) { \
-    VIXL_ASSERT(CPUHas(CPUFeatures::kPAuth));                      \
     VIXL_ASSERT(xd.Is64Bits() && xn.Is64Bits());                   \
     Emit(SF(xd) | OP##A | Rd(xd) | RnSP(xn));                      \
   }                                                                \
                                                                    \
   void Assembler::PRE##za(const Register& xd) {                    \
-    VIXL_ASSERT(CPUHas(CPUFeatures::kPAuth));                      \
     VIXL_ASSERT(xd.Is64Bits());                                    \
     Emit(SF(xd) | OP##ZA | Rd(xd));                                \
   }                                                                \
                                                                    \
   void Assembler::PRE##b(const Register& xd, const Register& xn) { \
-    VIXL_ASSERT(CPUHas(CPUFeatures::kPAuth));                      \
     VIXL_ASSERT(xd.Is64Bits() && xn.Is64Bits());                   \
     Emit(SF(xd) | OP##B | Rd(xd) | RnSP(xn));                      \
   }                                                                \
                                                                    \
   void Assembler::PRE##zb(const Register& xd) {                    \
-    VIXL_ASSERT(CPUHas(CPUFeatures::kPAuth));                      \
     VIXL_ASSERT(xd.Is64Bits());                                    \
     Emit(SF(xd) | OP##ZB | Rd(xd));                                \
   }
@@ -1080,10 +1076,23 @@ void Assembler::pacga(const Register& xd,
   Emit(SF(xd) | PACGA | Rd(xd) | Rn(xn) | RmSP(xm));
 }
 
+#if !defined(__aarch64__)
+static bool fake_pac = getenv("TARGET_EXPERIMENTAL_PAC") &&
+                       strcmp(getenv("TARGET_EXPERIMENTAL_PAC"), "fake") == 0;
+#elif defined(ANDROID_FAKE_PAC)
+static bool fake_pac = true;
+#else
+static bool fake_pac = false;
+#endif
+
 void Assembler::xpaci(const Register& xd) {
-  VIXL_ASSERT(CPUHas(CPUFeatures::kPAuth));
+  // VIXL_ASSERT(CPUHas(CPUFeatures::kPAuth));
   VIXL_ASSERT(xd.Is64Bits());
-  Emit(SF(xd) | XPACI | Rd(xd));
+  if (fake_pac) {
+    and_(xd, xd, 0x7fffffffff);
+  } else {
+    Emit(SF(xd) | XPACI | Rd(xd));
+  }
 }
 
 void Assembler::xpacd(const Register& xd) {
@@ -2542,8 +2551,12 @@ void Assembler::mov(const Register& rd, const Register& rm) {
 }
 
 void Assembler::xpaclri() {
-  VIXL_ASSERT(CPUHas(CPUFeatures::kPAuth));
-  Emit(XPACLRI);
+  // VIXL_ASSERT(CPUHas(CPUFeatures::kPAuth));
+  if (fake_pac) {
+    and_(x30, x30, 0x7fffffffff);
+  } else {
+    Emit(XPACLRI);
+  }
 }
 
 void Assembler::pacia1716() {
diff --git a/src/aarch64/constants-aarch64.h b/src/aarch64/constants-aarch64.h
index 36f5568d..bd843d0e 100644
--- a/src/aarch64/constants-aarch64.h
+++ b/src/aarch64/constants-aarch64.h
@@ -1298,16 +1298,16 @@ enum DataProcessing1SourceOp {
   AUTIB  = DataProcessing1SourceFixed | 0x80011400,
   AUTDA  = DataProcessing1SourceFixed | 0x80011800,
   AUTDB  = DataProcessing1SourceFixed | 0x80011C00,
-  PACIZA = DataProcessing1SourceFixed | 0x80012000,
-  PACIZB = DataProcessing1SourceFixed | 0x80012400,
-  PACDZA = DataProcessing1SourceFixed | 0x80012800,
-  PACDZB = DataProcessing1SourceFixed | 0x80012C00,
-  AUTIZA = DataProcessing1SourceFixed | 0x80013000,
-  AUTIZB = DataProcessing1SourceFixed | 0x80013400,
-  AUTDZA = DataProcessing1SourceFixed | 0x80013800,
-  AUTDZB = DataProcessing1SourceFixed | 0x80013C00,
-  XPACI  = DataProcessing1SourceFixed | 0x80014000,
-  XPACD  = DataProcessing1SourceFixed | 0x80014400
+  PACIZA = DataProcessing1SourceFixed | 0x800123E0,
+  PACIZB = DataProcessing1SourceFixed | 0x800127E0,
+  PACDZA = DataProcessing1SourceFixed | 0x80012BE0,
+  PACDZB = DataProcessing1SourceFixed | 0x80012FE0,
+  AUTIZA = DataProcessing1SourceFixed | 0x800133E0,
+  AUTIZB = DataProcessing1SourceFixed | 0x800137E0,
+  AUTDZA = DataProcessing1SourceFixed | 0x80013BE0,
+  AUTDZB = DataProcessing1SourceFixed | 0x80013FE0,
+  XPACI  = DataProcessing1SourceFixed | 0x800143E0,
+  XPACD  = DataProcessing1SourceFixed | 0x800147E0
 };
 
 // Data processing 2 source.
