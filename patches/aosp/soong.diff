diff --git a/android/env.go b/android/env.go
index c7c96d5c..341fe5a6 100644
--- a/android/env.go
+++ b/android/env.go
@@ -36,6 +36,8 @@ var soongDelveListen string
 var soongDelvePath string
 var soongDelveEnv []string
 
+var TargetExperimentalPac string
+
 func init() {
 	// Delve support needs to read this environment variable very early, before NewConfig has created a way to
 	// access originalEnv with dependencies.  Store the value where soong_build can find it, it will manually
@@ -55,6 +57,8 @@ func init() {
 		}
 	}
 
+	TargetExperimentalPac = os.Getenv("TARGET_EXPERIMENTAL_PAC")
+
 	// Clear the environment to prevent use of os.Getenv(), which would not provide dependencies on environment
 	// variable values.  The environment is available through ctx.Config().Getenv, ctx.Config().IsEnvTrue, etc.
 	os.Clearenv()
diff --git a/cc/builder.go b/cc/builder.go
index e571e5a0..66af85c2 100644
--- a/cc/builder.go
+++ b/cc/builder.go
@@ -140,7 +140,7 @@ var (
 		blueprint.RuleParams{
 			Depfile:     "${out}.d",
 			Deps:        blueprint.DepsGCC,
-			Command:     "CROSS_COMPILE=$crossCompile XZ=$xzCmd CLANG_BIN=${config.ClangBin} $stripPath ${args} -i ${in} -o ${out} -d ${out}.d",
+			Command:     "XZ=$xzCmd CLANG_BIN=${config.ClangBin} $stripPath ${args} -i ${in} -o ${out} -d ${out}.d",
 			CommandDeps: []string{"$stripPath", "$xzCmd"},
 			Pool:        darwinStripPool,
 		},
@@ -204,7 +204,7 @@ var (
 	// -w has been added since header-abi-dumper does not need to produce any sort of diagnostic information.
 	sAbiDump, sAbiDumpRE = remoteexec.StaticRules(pctx, "sAbiDump",
 		blueprint.RuleParams{
-			Command:     "rm -f $out && $reTemplate$sAbiDumper -o ${out} $in $exportDirs -- $cFlags -w -isystem prebuilts/clang-tools/${config.HostPrebuiltTag}/clang-headers",
+			Command:     "rm -f $out && $reTemplate$sAbiDumper -o ${out} $in $exportDirs -- $cFlags -UANDROID_EXPERIMENTAL_PAC -w -isystem prebuilts/clang-tools/${config.HostPrebuiltTag}/clang-headers",
 			CommandDeps: []string{"$sAbiDumper"},
 		}, &remoteexec.REParams{
 			Labels:       map[string]string{"type": "abi-dump", "tool": "header-abi-dumper"},
@@ -907,7 +907,7 @@ func TransformObjsToObj(ctx android.ModuleContext, objFiles android.Paths,
 func TransformBinaryPrefixSymbols(ctx android.ModuleContext, prefix string, inputFile android.Path,
 	flags builderFlags, outputFile android.WritablePath) {
 
-	objcopyCmd := gccCmd(flags.toolchain, "objcopy")
+	objcopyCmd := "${config.ClangBin}/llvm-objcopy"
 
 	ctx.Build(pctx, android.BuildParams{
 		Rule:        prefixSymbols,
diff --git a/cc/compiler.go b/cc/compiler.go
index 681b1ab9..a2d5e080 100644
--- a/cc/compiler.go
+++ b/cc/compiler.go
@@ -357,6 +357,24 @@ func (compiler *baseCompiler) compilerFlags(ctx ModuleContext, flags Flags, deps
 	flags.Local.ConlyFlags = config.ClangFilterUnknownCflags(flags.Local.ConlyFlags)
 	flags.Local.LdFlags = config.ClangFilterUnknownCflags(flags.Local.LdFlags)
 
+	if ctx.Config().Getenv("TARGET_EXPERIMENTAL_PAC") != "" {
+		var cflags []string
+		for _, f := range flags.Local.CFlags {
+			if f != "-fwhole-program-vtables" {
+				cflags = append(cflags, f)
+			}
+		}
+		flags.Local.CFlags = cflags
+
+		var cppflags []string
+		for _, f := range flags.Local.CppFlags {
+			if f != "-fwhole-program-vtables" {
+				cppflags = append(cppflags, f)
+			}
+		}
+		flags.Local.CppFlags = cppflags
+	}
+
 	target := "-target " + tc.ClangTriple()
 	if ctx.Os().Class == android.Device {
 		version := ctx.sdkVersion()
diff --git a/cc/config/arm64_device.go b/cc/config/arm64_device.go
index 93834630..91757b8c 100644
--- a/cc/config/arm64_device.go
+++ b/cc/config/arm64_device.go
@@ -207,6 +207,13 @@ func arm64ToolchainFactory(arch android.Arch) Toolchain {
 	toolchainClangCflags = append(toolchainClangCflags,
 		variantOrDefault(arm64ClangCpuVariantCflagsVar, arch.CpuVariant))
 
+	if android.TargetExperimentalPac != "" {
+		toolchainClangCflags = append(toolchainClangCflags, "-DANDROID_EXPERIMENTAL_PAC", "-march=armv8.3a", "-fptrauth-returns", "-fptrauth-intrinsics", "-fptrauth-calls", "-fptrauth-indirect-gotos", "-fptrauth-auth-traps")
+		if android.TargetExperimentalPac == "fake" {
+			toolchainClangCflags = append(toolchainClangCflags, "-mllvm", "-fake-pac", "-DANDROID_FAKE_PAC")
+		}
+	}
+
 	var extraLdflags string
 	switch arch.CpuVariant {
 	case "cortex-a53", "cortex-a72", "cortex-a73", "kryo", "exynos-m1", "exynos-m2":
diff --git a/cc/config/global.go b/cc/config/global.go
index 1dd8a2d0..50df9244 100644
--- a/cc/config/global.go
+++ b/cc/config/global.go
@@ -86,7 +86,6 @@ var (
 		"-Wl,--build-id=md5",
 		"-Wl,--warn-shared-textrel",
 		"-Wl,--fatal-warnings",
-		"-Wl,--no-undefined-version",
 		"-Wl,--exclude-libs,libgcc.a",
 		"-Wl,--exclude-libs,libgcc_stripped.a",
 		"-Wl,--exclude-libs,libunwind_llvm.a",
diff --git a/cc/linker.go b/cc/linker.go
index 57a0c016..47e050fa 100644
--- a/cc/linker.go
+++ b/cc/linker.go
@@ -550,8 +550,8 @@ var (
 	_                      = pctx.SourcePathVariable("genSortedBssSymbolsPath", "build/soong/scripts/gen_sorted_bss_symbols.sh")
 	gen_sorted_bss_symbols = pctx.AndroidStaticRule("gen_sorted_bss_symbols",
 		blueprint.RuleParams{
-			Command:     "CROSS_COMPILE=$crossCompile $genSortedBssSymbolsPath ${in} ${out}",
-			CommandDeps: []string{"$genSortedBssSymbolsPath", "${crossCompile}nm"},
+			Command:     "CLANG_BIN=${config.ClangBin} $genSortedBssSymbolsPath ${in} ${out}",
+			CommandDeps: []string{"$genSortedBssSymbolsPath", "${config.ClangBin}/llvm-nm"},
 		},
 		"crossCompile")
 )
diff --git a/cc/lto.go b/cc/lto.go
index 4489fc7d..2a19202d 100644
--- a/cc/lto.go
+++ b/cc/lto.go
@@ -87,15 +87,17 @@ func (lto *lto) flags(ctx BaseModuleContext, flags Flags) Flags {
 	}
 
 	if lto.LTO() {
-		var ltoFlag string
-		if Bool(lto.Properties.Lto.Thin) {
-			ltoFlag = "-flto=thin -fsplit-lto-unit"
-		} else {
-			ltoFlag = "-flto"
-		}
+		if ctx.Config().Getenv("TARGET_EXPERIMENTAL_PAC") == "" {
+			var ltoFlag string
+			if Bool(lto.Properties.Lto.Thin) {
+				ltoFlag = "-flto=thin -fsplit-lto-unit"
+			} else {
+				ltoFlag = "-flto"
+			}
 
-		flags.Local.CFlags = append(flags.Local.CFlags, ltoFlag)
-		flags.Local.LdFlags = append(flags.Local.LdFlags, ltoFlag)
+			flags.Local.CFlags = append(flags.Local.CFlags, ltoFlag)
+			flags.Local.LdFlags = append(flags.Local.LdFlags, ltoFlag)
+		}
 
 		if ctx.Config().IsEnvTrue("USE_THINLTO_CACHE") && Bool(lto.Properties.Lto.Thin) && lto.useClangLld(ctx) {
 			// Set appropriate ThinLTO cache policy
diff --git a/cc/ndk_prebuilt.go b/cc/ndk_prebuilt.go
index c4d77083..8341454a 100644
--- a/cc/ndk_prebuilt.go
+++ b/cc/ndk_prebuilt.go
@@ -155,7 +155,11 @@ func NdkPrebuiltStaticStlFactory() android.Module {
 
 func getNdkStlLibDir(ctx android.ModuleContext) android.SourcePath {
 	libDir := "prebuilts/ndk/current/sources/cxx-stl/llvm-libc++/libs"
-	return android.PathForSource(ctx, libDir).Join(ctx, ctx.Arch().Abi[0])
+	abi := ctx.Arch().Abi[0]
+	if abi == "arm64-v8a" && ctx.Config().Getenv("TARGET_EXPERIMENTAL_PAC") != "" {
+		abi = "arm64-v9a"
+	}
+	return android.PathForSource(ctx, libDir).Join(ctx, abi)
 }
 
 func (ndk *ndkPrebuiltStlLinker) link(ctx ModuleContext, flags Flags,
diff --git a/cc/sanitize.go b/cc/sanitize.go
index aaaf694d..e3f94ecd 100644
--- a/cc/sanitize.go
+++ b/cc/sanitize.go
@@ -519,7 +519,7 @@ func (sanitize *sanitize) flags(ctx ModuleContext, flags Flags) Flags {
 		flags.Local.LdFlags = append(flags.Local.LdFlags, `-Wl,-rpath,\$$ORIGIN`)
 	}
 
-	if Bool(sanitize.Properties.Sanitize.Cfi) {
+	if Bool(sanitize.Properties.Sanitize.Cfi) && ctx.Config().Getenv("TARGET_EXPERIMENTAL_PAC") == "" {
 		if ctx.Arch().ArchType == android.Arm {
 			// __cfi_check needs to be built as Thumb (see the code in linker_cfi.cpp). LLVM is not set up
 			// to do this on a function basis, so force Thumb on the entire module.
@@ -545,8 +545,18 @@ func (sanitize *sanitize) flags(ctx ModuleContext, flags Flags) Flags {
 		flags.Local.CFlags = append(flags.Local.CFlags, intOverflowCflags...)
 	}
 
-	if len(sanitize.Properties.Sanitizers) > 0 {
-		sanitizeArg := "-fsanitize=" + strings.Join(sanitize.Properties.Sanitizers, ",")
+	sanitizers := sanitize.Properties.Sanitizers
+	if ctx.Config().Getenv("TARGET_EXPERIMENTAL_PAC") != "" {
+		sanitizers = nil
+		for _, s := range sanitize.Properties.Sanitizers {
+			if !strings.HasPrefix(s, "cfi") {
+				sanitizers = append(sanitizers, s)
+			}
+		}
+	}
+
+	if len(sanitizers) > 0 {
+		sanitizeArg := "-fsanitize=" + strings.Join(sanitizers, ",")
 
 		flags.Local.CFlags = append(flags.Local.CFlags, sanitizeArg)
 		flags.Local.AsFlags = append(flags.Local.AsFlags, sanitizeArg)
diff --git a/cc/stl.go b/cc/stl.go
index 4e74c7fb..08141168 100644
--- a/cc/stl.go
+++ b/cc/stl.go
@@ -156,7 +156,7 @@ func needsLibAndroidSupport(ctx BaseModuleContext) bool {
 }
 
 func staticUnwinder(ctx android.BaseModuleContext) string {
-	if ctx.Arch().ArchType == android.Arm {
+	if ctx.Arch().ArchType == android.Arm || ctx.Arch().ArchType == android.Arm64 {
 		return "libunwind_llvm"
 	} else {
 		return "libgcc_stripped"
diff --git a/dexpreopt/dexpreopt.go b/dexpreopt/dexpreopt.go
index 5275e8fd..aa0295f8 100644
--- a/dexpreopt/dexpreopt.go
+++ b/dexpreopt/dexpreopt.go
@@ -377,9 +377,13 @@ func dexpreoptCommand(ctx android.PathContext, globalSoong *GlobalSoongConfig, g
 		dexLocationArg = strings.TrimPrefix(dexLocationArg, "/system")
 	}
 
-	cmd := rule.Command().
-		Text(`ANDROID_LOG_TAGS="*:e"`).
-		Tool(globalSoong.Dex2oat).
+	cmd := rule.Command().Text(`ANDROID_LOG_TAGS="*:e"`)
+
+	if ctx.Config().Getenv("TARGET_EXPERIMENTAL_PAC") != "" {
+		cmd = cmd.Text("TARGET_EXPERIMENTAL_PAC=" + ctx.Config().Getenv("TARGET_EXPERIMENTAL_PAC"))
+	}
+
+	cmd = cmd.Tool(globalSoong.Dex2oat).
 		Flag("--avoid-storing-invocation").
 		FlagWithOutput("--write-invocation-to=", invocationPath).ImplicitOutput(invocationPath).
 		Flag("--runtime-arg").FlagWithArg("-Xms", global.Dex2oatXms).
diff --git a/java/dexpreopt_bootjars.go b/java/dexpreopt_bootjars.go
index ed61d4bd..d39848cd 100644
--- a/java/dexpreopt_bootjars.go
+++ b/java/dexpreopt_bootjars.go
@@ -399,6 +399,10 @@ func buildBootImageVariant(ctx android.SingletonContext, image *bootImageVariant
 		cmd.Text(`ANDROID_LOG_TAGS="*:v"`)
 	}
 
+	if ctx.Config().Getenv("TARGET_EXPERIMENTAL_PAC") != "" {
+		cmd.Text("TARGET_EXPERIMENTAL_PAC=" + ctx.Config().Getenv("TARGET_EXPERIMENTAL_PAC"))
+	}
+
 	invocationPath := outputPath.ReplaceExtension(ctx, "invocation")
 
 	cmd.Tool(globalSoong.Dex2oat).
diff --git a/scripts/gen_sorted_bss_symbols.sh b/scripts/gen_sorted_bss_symbols.sh
index 244ed0de..ce291c9e 100755
--- a/scripts/gen_sorted_bss_symbols.sh
+++ b/scripts/gen_sorted_bss_symbols.sh
@@ -25,4 +25,5 @@
 
 set -o pipefail
 
-${CROSS_COMPILE}nm --size-sort $1 | awk '{if ($2 == "b" || $2 == "B") print $3}' > $2
+${CLANG_BIN}/llvm-nm --size-sort $1 | \
+  awk '{if (($2 == "b" || $2 == "B") && substr($3, 1, 1) != "$") print $3}' > $2
diff --git a/scripts/strip.sh b/scripts/strip.sh
index 40f01842..c27dc340 100755
--- a/scripts/strip.sh
+++ b/scripts/strip.sh
@@ -18,7 +18,6 @@
 # Inputs:
 #  Environment:
 #   CLANG_BIN: path to the clang bin directory
-#   CROSS_COMPILE: prefix added to readelf, objcopy tools
 #   XZ: path to the xz binary
 #  Arguments:
 #   -i ${file}: input file (required)
@@ -69,7 +68,7 @@ do_strip_keep_symbol_list() {
 
     KEEP_SYMBOLS="--strip-unneeded-symbol=* --keep-symbols="
     KEEP_SYMBOLS+="${outfile}.symbolList"
-    "${CROSS_COMPILE}objcopy" -w "${infile}" "${outfile}.tmp" ${KEEP_SYMBOLS}
+    "${CLANG_BIN}/llvm-objcopy" -w "${infile}" "${outfile}.tmp" ${KEEP_SYMBOLS}
 }
 
 do_strip_keep_mini_debug_info() {
@@ -78,17 +77,14 @@ do_strip_keep_mini_debug_info() {
     "${CLANG_BIN}/llvm-strip" --strip-all --keep-section=.ARM.attributes --remove-section=.comment "${infile}" -o "${outfile}.tmp" || fail=true
 
     if [ -z $fail ]; then
-        # Current prebult llvm-objcopy does not support --only-keep-debug flag,
-        # and cannot process object files that are produced with the flag. Use
-        # GNU objcopy instead for now. (b/141010852)
-        "${CROSS_COMPILE}objcopy" --only-keep-debug "${infile}" "${outfile}.debug"
+        "${CLANG_BIN}/llvm-objcopy" --only-keep-debug "${infile}" "${outfile}.debug"
         "${CLANG_BIN}/llvm-nm" -D "${infile}" --format=posix --defined-only 2> /dev/null | awk '{ print $1 }' | sort >"${outfile}.dynsyms"
         "${CLANG_BIN}/llvm-nm" "${infile}" --format=posix --defined-only | awk '{ if ($2 == "T" || $2 == "t" || $2 == "D") print $1 }' | sort > "${outfile}.funcsyms"
         comm -13 "${outfile}.dynsyms" "${outfile}.funcsyms" > "${outfile}.keep_symbols"
         echo >> "${outfile}.keep_symbols" # Ensure that the keep_symbols file is not empty.
-        "${CROSS_COMPILE}objcopy" --rename-section .debug_frame=saved_debug_frame "${outfile}.debug" "${outfile}.mini_debuginfo"
-        "${CROSS_COMPILE}objcopy" -S --remove-section .gdb_index --remove-section .comment --keep-symbols="${outfile}.keep_symbols" "${outfile}.mini_debuginfo"
-        "${CROSS_COMPILE}objcopy" --rename-section saved_debug_frame=.debug_frame "${outfile}.mini_debuginfo"
+        "${CLANG_BIN}/llvm-objcopy" --rename-section .debug_frame=saved_debug_frame "${outfile}.debug" "${outfile}.mini_debuginfo"
+        "${CLANG_BIN}/llvm-objcopy" -S --remove-section .gdb_index --remove-section .comment --keep-symbols="${outfile}.keep_symbols" "${outfile}.mini_debuginfo"
+        "${CLANG_BIN}/llvm-objcopy" --rename-section saved_debug_frame=.debug_frame "${outfile}.mini_debuginfo"
         "${XZ}" "${outfile}.mini_debuginfo"
 
         "${CLANG_BIN}/llvm-objcopy" --add-section .gnu_debugdata="${outfile}.mini_debuginfo.xz" "${outfile}.tmp"
@@ -196,7 +192,6 @@ mv "${outfile}.tmp" "${outfile}"
 cat <<EOF > "${depsfile}"
 ${outfile}: \
   ${infile} \
-  ${CROSS_COMPILE}objcopy \
   ${CLANG_BIN}/llvm-nm \
   ${CLANG_BIN}/llvm-objcopy \
   ${CLANG_BIN}/llvm-readelf \
diff --git a/ui/build/soong.go b/ui/build/soong.go
index 6a12add7..7cdead71 100644
--- a/ui/build/soong.go
+++ b/ui/build/soong.go
@@ -38,7 +38,7 @@ func runSoong(ctx Context, config Config) {
 		ctx.BeginTrace(metrics.RunSoong, "blueprint bootstrap")
 		defer ctx.EndTrace()
 
-		cmd := Command(ctx, config, "blueprint bootstrap", "build/blueprint/bootstrap.bash", "-t")
+		cmd := Command(ctx, config, "blueprint bootstrap", "build/blueprint/bootstrap.bash")
 		cmd.Environment.Set("BLUEPRINTDIR", "./build/blueprint")
 		cmd.Environment.Set("BOOTSTRAP", "./build/blueprint/bootstrap.bash")
 		cmd.Environment.Set("BUILDDIR", config.SoongOutDir())
