Building AOSP with the PAC Prototype
====================================

This prototype supports two possible targets:

1. An emulated device (FVP).
3. A hypervisor guest (Apple M1).

Building the compiler
---------------------

The compiler needs to be built against NDK r21 or later. This
prototype requires the use of the gn build system [1] to build the
compiler. Something like this args.gn should work:

clang_base_path = "/usr"
llvm_enable_assertions = true
llvm_targets_to_build = "all"
android_ndk_path = "/path/to/android-ndk-r21"

The script llvm/utils/frankendroid can be used to build and prepare a
gn-built compiler and builtins library to be used by the Android build
system. See the comments at the top of that file for how to use it.

[1] https://github.com/llvm/llvm-project/blob/master/llvm/utils/gn/README.rst

Building Rust
-------------

To build the Rust toolchain, first clone the PAuth ABI fork of Rust:

git clone -b apple-pac https://github.com/pcc/rust

Make a copy of this LLVM repository under rust/src/llvm-project.
Then in the rust directory, create a source tarball:

./x.py dist rustc-src

In a separate directory, clone the Android Rust toolchain repository:

mkdir android-rust
cd android-rust
repo init -u https://android.googlesource.com/platform/manifest -b rust-toolchain
repo sync -j72 -m /path/to/aosp/prebuilts/rust/linux-x86/1.67.1/manifest_*.xml

Replace the contents of the toolchain/rustc directory with the contents
of the source tarball that you just created:

cd toolchain/rustc
rm -rf *
tar xz --strip-components=1 < /path/to/rust/build/dist/rustc-1.67.0-dev-src.tar.gz
touch Android.mk

Remove an unwanted patch from the toolchain/android_rust repository:

rm toolchain/android_rust/patches/longterm/rustc-0012-libstd-link-signal-at-compilation-for-Android.patch

Finally, build the toolchain:

toolchain/android_rust/build.py --lto none

And symlink the built toolchain into your AOSP source directory:

ln -s $PWD/out/package /path/to/aosp/prebuilts/rust/linux-x86/myrust

Building the NDK libc++
-----------------------

Some operating system components are built against NDK libc++, so
its ABI needs to match. See aosp/ndk.notes for quick notes on how to
rebuild this component of the NDK.

Patching AOSP
-------------

Apply aosp/0001-PAC.patch to the root of your AOSP checkout with
"patch -p1". This patch applies cleanly to aosp/master as of:

Fri Sep 30 03:03:24 2022 +0000

with these patches applied:

https://android-review.googlesource.com/c/platform/system/core/+/2239035
https://chromium-review.googlesource.com/c/chromium/src/+/3933186 (in external/angle)

Patching the kernel
-------------------

This prototype requires the use of the android-mainline or androidNN-5.15
kernel. This applies to both FVP and M1. Follow the normal target-specific
instructions linked below to rebuild the kernel, but it is not normally
necessary to do so.

Building AOSP
-------------

Set the TARGET_EXPERIMENTAL_PAC environment variable to any value
to enable the forward-edge PAC support.

Set LLVM_PREBUILTS_VERSION and LLVM_BINDGEN_PREBUILTS_VERSION to
the basename of your LLVM source directory. This is the name of the
subdirectory under prebuilts/clang/host/linux-x86 that was created
by the frankendroid script.

Set ENABLE_CFI=false because this prototype is not compatible
with the software-based CFI used in Android.

Set the following environment variables to specify the Rust compiler:

export RUST_PREBUILTS_VERSION=myrust
export RUST_DEFAULT_LINTS=' '
export RUST_VENDOR_LINTS=' '

Aside from that, follow the target-specific instructions.

For FVP, see https://cs.android.com/android/platform/superproject/+/master:device/generic/goldfish/fvpbase/README.md
For macOS on M1, see https://github.com/google/android-emulator-m1-preview
but use the commands below to build the system image zip file:

lunch sdk_phone64_arm64-userdebug
m emu_img_zip

For Linux on M1, see README.cuttlefish

Running AOSP
------------

The resulting image should be fully functional with some
exceptions.

64-bit applications that use WebView and the PAC ABI will crash on
startup because WebView is provided as a prebuilt and therefore does
not conform to the PAC ABI. The WebView prebuilt will need to be
rebuilt and instructions for doing so will be provided at a later date.

Running the Rust std tests
--------------------------

Run the script llvm/utils/frankenndk (read it first, to figure out how
to run it) to create a franken-NDK in the ndk directory of your LLVM
source checkout that uses the PAuth ABI compiler.

Then create a cargo.yaml file in the root directory of your PAuth ABI
Rust fork with the following contents:

[build]
android-ndk = "/path/to/llvm-project/ndk"

Finally, run ./build_pauth_abi.sh in the same location.
