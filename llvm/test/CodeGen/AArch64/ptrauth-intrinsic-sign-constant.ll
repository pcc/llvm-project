; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple arm64e-apple-darwin                                       | FileCheck %s --check-prefixes=CHECK,DYN
; RUN: llc < %s -mtriple arm64e-apple-darwin -aarch64-ptrauth-global-dynamic-mat=1 | FileCheck %s --check-prefixes=CHECK,DYN
; RUN: llc < %s -mtriple arm64e-apple-darwin -aarch64-ptrauth-global-dynamic-mat=0 | FileCheck %s --check-prefixes=CHECK,LOAD

target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"

define i8* @test_intrinsic() {
; DYN-LABEL: test_intrinsic:
; DYN:       ; %bb.0:
; DYN-NEXT:  Lloh0:
; DYN-NEXT:    adrp x16, _g@GOTPAGE
; DYN-NEXT:  Lloh1:
; DYN-NEXT:    ldr x16, [x16, _g@GOTPAGEOFF]
; DYN-NEXT:    mov x17, #56
; DYN-NEXT:    pacda x16, x17
; DYN-NEXT:    mov x0, x16
; DYN-NEXT:    ret
; DYN-NEXT:    .loh AdrpLdrGot Lloh0, Lloh1
;
; LOAD-LABEL: test_intrinsic:
; LOAD:       ; %bb.0:
; LOAD-NEXT:  Lloh0:
; LOAD-NEXT:    adrp x0, l_g$auth_ptr$da$56@PAGE
; LOAD-NEXT:  Lloh1:
; LOAD-NEXT:    ldr x0, [x0, l_g$auth_ptr$da$56@PAGEOFF]
; LOAD-NEXT:    ret
; LOAD-NEXT:    .loh AdrpLdr Lloh0, Lloh1
  %tmp0 = ptrtoint i32* @g to i64
  %tmp1 = call i64 @llvm.ptrauth.sign(i64 %tmp0, i32 2, i64 56)
  %tmp2 = inttoptr i64 %tmp1 to i8*
  ret i8* %tmp2
}

define i8* @test_intrinsic_weak() {
; CHECK-LABEL: test_intrinsic_weak:
; CHECK:       ; %bb.0:
; CHECK-NEXT:  Lloh2:
; CHECK-NEXT:    adrp x0, l_g_weak$auth_ptr$da$56@PAGE
; CHECK-NEXT:  Lloh3:
; CHECK-NEXT:    ldr x0, [x0, l_g_weak$auth_ptr$da$56@PAGEOFF]
; CHECK-NEXT:    ret
; CHECK-NEXT:    .loh AdrpLdr Lloh2, Lloh3
  %tmp0 = ptrtoint i32* @g_weak to i64
  %tmp1 = call i64 @llvm.ptrauth.sign(i64 %tmp0, i32 2, i64 56)
  %tmp2 = inttoptr i64 %tmp1 to i8*
  ret i8* %tmp2
}

; Non-external symbols don't need to be accessed through the GOT: always prefer
; the dynamic materialization sequence, with adrp+add rather than a GOT load.

define i8* @test_intrinsic_strong_def() {
; CHECK-LABEL: test_intrinsic_strong_def:
; CHECK:       ; %bb.0:
; CHECK-NEXT:  Lloh4:
; CHECK-NEXT:    adrp x16, _g_strong_def@PAGE
; CHECK-NEXT:  Lloh5:
; CHECK-NEXT:    add x16, x16, _g_strong_def@PAGEOFF
; CHECK-NEXT:    pacdza x16
; CHECK-NEXT:    mov x0, x16
; CHECK-NEXT:    ret
; CHECK-NEXT:    .loh AdrpAdd Lloh4, Lloh5
  %tmp0 = ptrtoint i32* @g_strong_def to i64
  %tmp1 = call i64 @llvm.ptrauth.sign(i64 %tmp0, i32 2, i64 0)
  %tmp2 = inttoptr i64 %tmp1 to i8*
  ret i8* %tmp2
}

define i8* @test_intrinsic_bkey() {
; DYN-LABEL: test_intrinsic_bkey:
; DYN:       ; %bb.0:
; DYN-NEXT:  Lloh6:
; DYN-NEXT:    adrp x16, _g@GOTPAGE
; DYN-NEXT:  Lloh7:
; DYN-NEXT:    ldr x16, [x16, _g@GOTPAGEOFF]
; DYN-NEXT:    mov x17, #78
; DYN-NEXT:    pacib x16, x17
; DYN-NEXT:    mov x0, x16
; DYN-NEXT:    ret
; DYN-NEXT:    .loh AdrpLdrGot Lloh6, Lloh7
;
; LOAD-LABEL: test_intrinsic_bkey:
; LOAD:       ; %bb.0:
; LOAD-NEXT:  Lloh6:
; LOAD-NEXT:    adrp x16, l_g$auth_ptr$ia$78@PAGE
; LOAD-NEXT:  Lloh7:
; LOAD-NEXT:    ldr x16, [x16, l_g$auth_ptr$ia$78@PAGEOFF]
; LOAD-NEXT:    mov x17, #78
; LOAD-NEXT:    autia x16, x17
; LOAD-NEXT:    mov x17, x16
; LOAD-NEXT:    xpaci x17
; LOAD-NEXT:    cmp x16, x17
; LOAD-NEXT:    b.eq Lauth_success_0
; LOAD-NEXT:    mov x16, x17
; LOAD-NEXT:    b Lresign_end_0
; LOAD-NEXT:  Lauth_success_0:
; LOAD-NEXT:    mov x17, #78
; LOAD-NEXT:    pacib x16, x17
; LOAD-NEXT:  Lresign_end_0:
; LOAD-NEXT:    mov x0, x16
; LOAD-NEXT:    ret
; LOAD-NEXT:    .loh AdrpLdr Lloh6, Lloh7
  %tmp0 = ptrtoint i32* @g to i64
  %tmp1 = call i64 @llvm.ptrauth.sign(i64 %tmp0, i32 1, i64 78)
  %tmp2 = inttoptr i64 %tmp1 to i8*
  ret i8* %tmp2
}

define i8* @test_intrinsic_constantexpr() {
; DYN-LABEL: test_intrinsic_constantexpr:
; DYN:       ; %bb.0:
; DYN-NEXT:  Lloh8:
; DYN-NEXT:    adrp x16, _g@GOTPAGE
; DYN-NEXT:  Lloh9:
; DYN-NEXT:    ldr x16, [x16, _g@GOTPAGEOFF]
; DYN-NEXT:    mov x17, #56
; DYN-NEXT:    pacda x16, x17
; DYN-NEXT:    mov x0, x16
; DYN-NEXT:    ret
; DYN-NEXT:    .loh AdrpLdrGot Lloh8, Lloh9
;
; LOAD-LABEL: test_intrinsic_constantexpr:
; LOAD:       ; %bb.0:
; LOAD-NEXT:  Lloh8:
; LOAD-NEXT:    adrp x0, l_g$auth_ptr$da$56@PAGE
; LOAD-NEXT:  Lloh9:
; LOAD-NEXT:    ldr x0, [x0, l_g$auth_ptr$da$56@PAGEOFF]
; LOAD-NEXT:    ret
; LOAD-NEXT:    .loh AdrpLdr Lloh8, Lloh9
  %tmp0 = call i64 @llvm.ptrauth.sign(i64 ptrtoint (i32* @g to i64), i32 2, i64 56)
  %tmp1 = inttoptr i64 %tmp0 to i8*
  ret i8* %tmp1
}

define i8* @test_intrinsic_constantexpr_offset() {
; DYN-LABEL: test_intrinsic_constantexpr_offset:
; DYN:       ; %bb.0:
; DYN-NEXT:  Lloh10:
; DYN-NEXT:    adrp x16, _g@GOTPAGE
; DYN-NEXT:  Lloh11:
; DYN-NEXT:    ldr x16, [x16, _g@GOTPAGEOFF]
; DYN-NEXT:    add x16, x16, #16
; DYN-NEXT:    mov x17, #56
; DYN-NEXT:    pacda x16, x17
; DYN-NEXT:    mov x0, x16
; DYN-NEXT:    ret
; DYN-NEXT:    .loh AdrpLdrGot Lloh10, Lloh11
;
; LOAD-LABEL: test_intrinsic_constantexpr_offset:
; LOAD:       ; %bb.0:
; LOAD-NEXT:  Lloh10:
; LOAD-NEXT:    adrp x0, l_g$16$auth_ptr$da$56@PAGE
; LOAD-NEXT:  Lloh11:
; LOAD-NEXT:    ldr x0, [x0, l_g$16$auth_ptr$da$56@PAGEOFF]
; LOAD-NEXT:    ret
; LOAD-NEXT:    .loh AdrpLdr Lloh10, Lloh11
  %tmp0 = call i64 @llvm.ptrauth.sign(i64 ptrtoint (i8* getelementptr (i8, i8* bitcast (i32* @g to i8*), i64 16) to i64), i32 2, i64 56)
  %tmp1 = inttoptr i64 %tmp0 to i8*
  ret i8* %tmp1
}

define i8* @test_intrinsic_constantexpr_offset_neg() {
; CHECK-LABEL: test_intrinsic_constantexpr_offset_neg:
; CHECK:       ; %bb.0:
; CHECK-NEXT:  Lloh12:
; CHECK-NEXT:    adrp x16, _g@GOTPAGE
; CHECK-NEXT:  Lloh13:
; CHECK-NEXT:    ldr x16, [x16, _g@GOTPAGEOFF]
; CHECK-NEXT:    add x16, x16, #1
; CHECK-NEXT:    add x16, x16, #16, lsl #12 ; =65536
; CHECK-NEXT:    add x16, x16, #128, lsl #24 ; =2147483648
; CHECK-NEXT:    mov x17, #56
; CHECK-NEXT:    pacda x16, x17
; CHECK-NEXT:    mov x0, x16
; CHECK-NEXT:    ret
; CHECK-NEXT:    .loh AdrpLdrGot Lloh12, Lloh13
  %tmp0 = call i64 @llvm.ptrauth.sign(i64 ptrtoint (i8* getelementptr (i8, i8* bitcast (i32* @g to i8*), i64 add (i64 2147483648, i64 65537)) to i64), i32 2, i64 56)
  %tmp1 = inttoptr i64 %tmp0 to i8*
  ret i8* %tmp1
}

define i8* @test_intrinsic_non_constant(i8* %arg0) {
; CHECK-LABEL: test_intrinsic_non_constant:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    mov w8, #56
; CHECK-NEXT:    pacda x0, x8
; CHECK-NEXT:    ret
  %tmp0 = ptrtoint i8* %arg0 to i64
  %tmp1 = call i64 @llvm.ptrauth.sign(i64 %tmp0, i32 2, i64 56)
  %tmp2 = inttoptr i64 %tmp1 to i8*
  ret i8* %tmp2
}

define i8* @test_intrinsic_blend_addr_disc(i8* %arg0) {
; DYN-LABEL: test_intrinsic_blend_addr_disc:
; DYN:       ; %bb.0:
; DYN-NEXT:  Lloh14:
; DYN-NEXT:    adrp x16, _g@GOTPAGE
; DYN-NEXT:  Lloh15:
; DYN-NEXT:    ldr x16, [x16, _g@GOTPAGEOFF]
; DYN-NEXT:    mov x17, x0
; DYN-NEXT:    movk x17, #23, lsl #48
; DYN-NEXT:    pacda x16, x17
; DYN-NEXT:    mov x0, x16
; DYN-NEXT:    ret
; DYN-NEXT:    .loh AdrpLdrGot Lloh14, Lloh15
;
; LOAD-LABEL: test_intrinsic_blend_addr_disc:
; LOAD:       ; %bb.0:
; LOAD-NEXT:  Lloh14:
; LOAD-NEXT:    adrp x16, l_g$auth_ptr$da$23@PAGE
; LOAD-NEXT:  Lloh15:
; LOAD-NEXT:    ldr x16, [x16, l_g$auth_ptr$da$23@PAGEOFF]
; LOAD-NEXT:    mov x17, #23
; LOAD-NEXT:    autda x16, x17
; LOAD-NEXT:    mov x17, x16
; LOAD-NEXT:    xpacd x17
; LOAD-NEXT:    cmp x16, x17
; LOAD-NEXT:    b.eq Lauth_success_1
; LOAD-NEXT:    mov x16, x17
; LOAD-NEXT:    b Lresign_end_1
; LOAD-NEXT:  Lauth_success_1:
; LOAD-NEXT:    mov x17, x0
; LOAD-NEXT:    movk x17, #23, lsl #48
; LOAD-NEXT:    pacda x16, x17
; LOAD-NEXT:  Lresign_end_1:
; LOAD-NEXT:    mov x0, x16
; LOAD-NEXT:    ret
; LOAD-NEXT:    .loh AdrpLdr Lloh14, Lloh15
  %tmp0 = ptrtoint i32* @g to i64
  %tmp1 = ptrtoint i8* %arg0 to i64
  %tmp2 = call i64 @llvm.ptrauth.blend(i64 %tmp1, i64 23)
  %tmp3 = call i64 @llvm.ptrauth.sign(i64 %tmp0, i32 2, i64 %tmp2)
  %tmp4 = inttoptr i64 %tmp3 to i8*
  ret i8* %tmp4
}

define i8* @test_intrinsic_addr_disc(i8* %arg0) {
; DYN-LABEL: test_intrinsic_addr_disc:
; DYN:       ; %bb.0:
; DYN-NEXT:  Lloh16:
; DYN-NEXT:    adrp x16, _g@GOTPAGE
; DYN-NEXT:  Lloh17:
; DYN-NEXT:    ldr x16, [x16, _g@GOTPAGEOFF]
; DYN-NEXT:    pacda x16, x0
; DYN-NEXT:    mov x0, x16
; DYN-NEXT:    ret
; DYN-NEXT:    .loh AdrpLdrGot Lloh16, Lloh17
;
; LOAD-LABEL: test_intrinsic_addr_disc:
; LOAD:       ; %bb.0:
; LOAD-NEXT:  Lloh16:
; LOAD-NEXT:    adrp x16, l_g$auth_ptr$da$0@PAGE
; LOAD-NEXT:  Lloh17:
; LOAD-NEXT:    ldr x16, [x16, l_g$auth_ptr$da$0@PAGEOFF]
; LOAD-NEXT:    autdza x16
; LOAD-NEXT:    mov x17, x16
; LOAD-NEXT:    xpacd x17
; LOAD-NEXT:    cmp x16, x17
; LOAD-NEXT:    b.eq Lauth_success_2
; LOAD-NEXT:    mov x16, x17
; LOAD-NEXT:    b Lresign_end_2
; LOAD-NEXT:  Lauth_success_2:
; LOAD-NEXT:    pacda x16, x0
; LOAD-NEXT:  Lresign_end_2:
; LOAD-NEXT:    mov x0, x16
; LOAD-NEXT:    ret
; LOAD-NEXT:    .loh AdrpLdr Lloh16, Lloh17
  %tmp0 = ptrtoint i32* @g to i64
  %tmp1 = ptrtoint i8* %arg0 to i64
  %tmp2 = call i64 @llvm.ptrauth.sign(i64 %tmp0, i32 2, i64 %tmp1)
  %tmp3 = inttoptr i64 %tmp2 to i8*
  ret i8* %tmp3
}

define i8* @test_intrinsic_blend_addr_disc_cross_bb(i8* %arg0, i8* %arg1, i1 %arg2) {
; CHECK-LABEL: test_intrinsic_blend_addr_disc_cross_bb:
; CHECK:       ; %bb.0: ; %common.ret
; CHECK-NEXT:    movk x0, #23, lsl #48
; CHECK-NEXT:  Lloh18:
; CHECK-NEXT:    adrp x8, _g2@GOTPAGE
; CHECK-NEXT:  Lloh19:
; CHECK-NEXT:    ldr x8, [x8, _g2@GOTPAGEOFF]
; CHECK-NEXT:  Lloh20:
; CHECK-NEXT:    adrp x9, _g@GOTPAGE
; CHECK-NEXT:  Lloh21:
; CHECK-NEXT:    ldr x9, [x9, _g@GOTPAGEOFF]
; CHECK-NEXT:    tst w2, #0x1
; CHECK-NEXT:    csel x8, x9, x8, ne
; CHECK-NEXT:    pacda x8, x0
; CHECK-NEXT:    mov x0, x8
; CHECK-NEXT:    ret
; CHECK-NEXT:    .loh AdrpLdrGot Lloh20, Lloh21
; CHECK-NEXT:    .loh AdrpLdrGot Lloh18, Lloh19
  %tmp0 = ptrtoint i8* %arg0 to i64
  %tmp1 = call i64 @llvm.ptrauth.blend(i64 %tmp0, i64 23)
  br i1 %arg2, label %bb1, label %bb2

bb1:
  %tmp2 = ptrtoint i32* @g to i64
  %tmp3 = call i64 @llvm.ptrauth.sign(i64 %tmp2, i32 2, i64 %tmp1)
  %tmp4 = inttoptr i64 %tmp3 to i8*
  ret i8* %tmp4

bb2:
  %tmp5 = ptrtoint i32* @g2 to i64
  %tmp6 = call i64 @llvm.ptrauth.sign(i64 %tmp5, i32 2, i64 %tmp1)
  %tmp7 = inttoptr i64 %tmp6 to i8*
  ret i8* %tmp7
}

define i8* @test_intrinsic_function() {
; CHECK-LABEL: test_intrinsic_function:
; CHECK:       ; %bb.0:
; CHECK-NEXT:  Lloh22:
; CHECK-NEXT:    adrp x16, _test_intrinsic_function@PAGE
; CHECK-NEXT:  Lloh23:
; CHECK-NEXT:    add x16, x16, _test_intrinsic_function@PAGEOFF
; CHECK-NEXT:    mov x17, #56
; CHECK-NEXT:    pacib x16, x17
; CHECK-NEXT:    mov x0, x16
; CHECK-NEXT:    ret
; CHECK-NEXT:    .loh AdrpAdd Lloh22, Lloh23
  %tmp0 = call i64 @llvm.ptrauth.sign(i64 ptrtoint (i8* ()* @test_intrinsic_function to i64), i32 1, i64 56)
  %tmp1 = inttoptr i64 %tmp0 to i8*
  ret i8* %tmp1
}

define i8* @test_intrinsic_constant_int() {
; CHECK-LABEL: test_intrinsic_constant_int:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    mov x0, #0
; CHECK-NEXT:    mov w8, #56
; CHECK-NEXT:    pacda x0, x8
; CHECK-NEXT:    ret
  %tmp0 = call i64 @llvm.ptrauth.sign(i64 0, i32 2, i64 56)
  %tmp1 = inttoptr i64 %tmp0 to i8*
  ret i8* %tmp1
}

define i8* @test_intrinsic_constantexpr_offset_strong_def() {
; CHECK-LABEL: test_intrinsic_constantexpr_offset_strong_def:
; CHECK:       ; %bb.0:
; CHECK-NEXT:  Lloh24:
; CHECK-NEXT:    adrp x16, _g_strong_def@PAGE
; CHECK-NEXT:  Lloh25:
; CHECK-NEXT:    add x16, x16, _g_strong_def@PAGEOFF
; CHECK-NEXT:    add x16, x16, #2
; CHECK-NEXT:    mov x17, #56
; CHECK-NEXT:    pacda x16, x17
; CHECK-NEXT:    mov x0, x16
; CHECK-NEXT:    ret
; CHECK-NEXT:    .loh AdrpAdd Lloh24, Lloh25
  %tmp0 = call i64 @llvm.ptrauth.sign(i64 ptrtoint (i8* getelementptr (i8, i8* bitcast (i32* @g_strong_def to i8*), i64 2) to i64), i32 2, i64 56)
  %tmp1 = inttoptr i64 %tmp0 to i8*
  ret i8* %tmp1
}

@g.ptrauth = private constant { i8*, i32, i64, i64 } { i8* bitcast (i32* @g to i8*), i32 0, i64 0, i64 78 }, section "llvm.ptrauth", align 8

define i8* @test_intrinsic_ptrauth_global() {
; DYN-LABEL: test_intrinsic_ptrauth_global:
; DYN:       ; %bb.0:
; DYN-NEXT:  Lloh26:
; DYN-NEXT:    adrp x16, _g@GOTPAGE
; DYN-NEXT:  Lloh27:
; DYN-NEXT:    ldr x16, [x16, _g@GOTPAGEOFF]
; DYN-NEXT:    mov x17, #78
; DYN-NEXT:    pacia x16, x17
; DYN-NEXT:    mov x0, x16
; DYN-NEXT:    mov w8, #56
; DYN-NEXT:    pacib x0, x8
; DYN-NEXT:    ret
; DYN-NEXT:    .loh AdrpLdrGot Lloh26, Lloh27
;
; LOAD-LABEL: test_intrinsic_ptrauth_global:
; LOAD:       ; %bb.0:
; LOAD-NEXT:  Lloh26:
; LOAD-NEXT:    adrp x0, l_g$auth_ptr$ia$78@PAGE
; LOAD-NEXT:  Lloh27:
; LOAD-NEXT:    ldr x0, [x0, l_g$auth_ptr$ia$78@PAGEOFF]
; LOAD-NEXT:    mov w8, #56
; LOAD-NEXT:    pacib x0, x8
; LOAD-NEXT:    ret
; LOAD-NEXT:    .loh AdrpLdr Lloh26, Lloh27
  %tmp0 = call i64 @llvm.ptrauth.sign(i64 ptrtoint ({ i8*, i32, i64, i64 }* @g.ptrauth to i64), i32 1, i64 56)
  %tmp1 = inttoptr i64 %tmp0 to i8*
  ret i8* %tmp1
}

declare i64 @llvm.ptrauth.sign(i64, i32, i64)
declare i64 @llvm.ptrauth.blend(i64, i64)

@g = external global i32
@g2 = external global i32

@g_weak = extern_weak global i32

@g_strong_def = constant i32 42

; LOAD-LABEL:   .section __DATA,__auth_ptr
; LOAD-NEXT:    .p2align 3
; LOAD-NEXT:  l_g$16$auth_ptr$da$56:
; LOAD-NEXT:    .quad (_g+16)@AUTH(da,56)
; LOAD-NEXT:  l_g$auth_ptr$da$0:
; LOAD-NEXT:    .quad _g@AUTH(da,0)
; LOAD-NEXT:  l_g$auth_ptr$da$23:
; LOAD-NEXT:    .quad _g@AUTH(da,23)
; LOAD-NEXT:  l_g$auth_ptr$da$56:
; LOAD-NEXT:    .quad _g@AUTH(da,56)
; LOAD-NEXT:  l_g$auth_ptr$ia$78:
; LOAD-NEXT:    .quad _g@AUTH(ia,78)
; LOAD-NEXT:  l_g_weak$auth_ptr$da$56:
; LOAD-NEXT:    .quad _g_weak@AUTH(da,56)
