; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -instcombine -S | FileCheck %s

; CHECK: [[FOO_AUTH_42:@.*]] = private constant { i8*, i32, i64, i64 } { i8* bitcast (void ()* @foo to i8*), i32 0, i64 0, i64 42 }, section "llvm.ptrauth"

define i32 @test_ptrauth_call_resign(i8* %p) {
; CHECK-LABEL: @test_ptrauth_call_resign(
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i8* [[P:%.*]] to i32 ()*
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 [[TMP1]]() [ "ptrauth"(i32 0, i64 1234) ]
; CHECK-NEXT:    ret i32 [[TMP3]]
;
  %tmp0 = ptrtoint i8* %p to i64
  %tmp1 = call i64 @llvm.ptrauth.resign(i64 %tmp0, i32 0, i64 1234, i32 2, i64 5678)
  %tmp2 = inttoptr i64 %tmp1 to i32()*
  %tmp3 = call i32 %tmp2() [ "ptrauth"(i32 2, i64 5678) ]
  ret i32 %tmp3
}

define i32 @test_ptrauth_call_resign_blend(i8** %pp) {
; CHECK-LABEL: @test_ptrauth_call_resign_blend(
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i8** [[PP:%.*]] to i32 ()**
; CHECK-NEXT:    [[TMP012:%.*]] = load i32 ()*, i32 ()** [[TMP1]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 [[TMP012]]() [ "ptrauth"(i32 0, i64 1234) ]
; CHECK-NEXT:    ret i32 [[TMP6]]
;
  %tmp0 = load i8*, i8** %pp, align 8
  %tmp1 = ptrtoint i8** %pp to i64
  %tmp2 = ptrtoint i8* %tmp0 to i64
  %tmp3 = call i64 @llvm.ptrauth.blend(i64 %tmp1, i64 5678)
  %tmp4 = call i64 @llvm.ptrauth.resign(i64 %tmp2, i32 0, i64 1234, i32 1, i64 %tmp3)
  %tmp5 = inttoptr i64 %tmp4 to i32()*
  %tmp6 = call i32 %tmp5() [ "ptrauth"(i32 1, i64 %tmp3) ]
  ret i32 %tmp6
}

define i32 @test_ptrauth_call_resign_blend_2(i8** %pp) {
; CHECK-LABEL: @test_ptrauth_call_resign_blend_2(
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i8** [[PP:%.*]] to i32 ()**
; CHECK-NEXT:    [[TMP012:%.*]] = load i32 ()*, i32 ()** [[TMP1]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint i8** [[PP]] to i64
; CHECK-NEXT:    [[TMP3:%.*]] = call i64 @llvm.ptrauth.blend(i64 [[TMP1]], i64 5678)
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 [[TMP012]]() [ "ptrauth"(i32 1, i64 [[TMP3]]) ]
; CHECK-NEXT:    ret i32 [[TMP6]]
;
  %tmp0 = load i8*, i8** %pp, align 8
  %tmp1 = ptrtoint i8** %pp to i64
  %tmp2 = ptrtoint i8* %tmp0 to i64
  %tmp3 = call i64 @llvm.ptrauth.blend(i64 %tmp1, i64 5678)
  %tmp4 = call i64 @llvm.ptrauth.resign(i64 %tmp2, i32 1, i64 %tmp3, i32 0, i64 1234)
  %tmp5 = inttoptr i64 %tmp4 to i32()*
  %tmp6 = call i32 %tmp5() [ "ptrauth"(i32 0, i64 1234) ]
  ret i32 %tmp6
}

define i32 @test_ptrauth_call_auth(i8* %p) {
; CHECK-LABEL: @test_ptrauth_call_auth(
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i8* [[P:%.*]] to i32 ()*
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 [[TMP1]]() [ "ptrauth"(i32 2, i64 5678) ]
; CHECK-NEXT:    ret i32 [[TMP3]]
;
  %tmp0 = ptrtoint i8* %p to i64
  %tmp1 = call i64 @llvm.ptrauth.auth(i64 %tmp0, i32 2, i64 5678)
  %tmp2 = inttoptr i64 %tmp1 to i32()*
  %tmp3 = call i32 %tmp2()
  ret i32 %tmp3
}

define i32 @test_ptrauth_call_sign(i8* %p) {
; CHECK-LABEL: @test_ptrauth_call_sign(
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i8* [[P:%.*]] to i32 ()*
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 [[TMP1]]()
; CHECK-NEXT:    ret i32 [[TMP3]]
;
  %tmp0 = ptrtoint i8* %p to i64
  %tmp1 = call i64 @llvm.ptrauth.sign(i64 %tmp0, i32 2, i64 5678)
  %tmp2 = inttoptr i64 %tmp1 to i32()*
  %tmp3 = call i32 %tmp2() [ "ptrauth"(i32 2, i64 5678) ]
  ret i32 %tmp3
}

define i64 @test_ptrauth_auth_nop(i8* %p) {
; CHECK-LABEL: @test_ptrauth_auth_nop(
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint i8* [[P:%.*]] to i64
; CHECK-NEXT:    ret i64 [[TMP0]]
;
  %tmp0 = ptrtoint i8* %p to i64
  %signed = call i64 @llvm.ptrauth.sign(i64 %tmp0, i32 1, i64 1234)
  %authed = call i64 @llvm.ptrauth.auth(i64 %signed, i32 1, i64 1234)
  ret i64 %authed
}

declare void @foo()
@foo.ptrauth = private constant { i8*, i32, i64, i64 } { i8* bitcast (void ()* @foo to i8*), i32 1, i64 0, i64 1234 }, section "llvm.ptrauth", align 8

define i64 @test_ptrauth_auth_nop_global() {
; CHECK-LABEL: @test_ptrauth_auth_nop_global(
; CHECK-NEXT:    ret i64 ptrtoint (void ()* @foo to i64)
;
  %authed = call i64 @llvm.ptrauth.auth(i64 ptrtoint({ i8*, i32, i64, i64 }* @foo.ptrauth to i64), i32 1, i64 1234)
  ret i64 %authed
}

@foo.ptrauth.1 = private constant { i8*, i32, i64, i64 } { i8* bitcast (void ()* @foo to i8*), i32 1, i64 ptrtoint(void()* @foo to i64), i64 1234 }, section "llvm.ptrauth", align 8
define i64 @test_ptrauth_auth_nop_global_addrdisc() {
; CHECK-LABEL: @test_ptrauth_auth_nop_global_addrdisc(
; CHECK-NEXT:    ret i64 ptrtoint (void ()* @foo to i64)
;
  %addr = ptrtoint void()* @foo to i64
  %blended = call i64 @llvm.ptrauth.blend(i64 %addr, i64 1234)
  %authed = call i64 @llvm.ptrauth.auth(i64 ptrtoint({ i8*, i32, i64, i64 }* @foo.ptrauth.1 to i64), i32 1, i64 %blended)
  ret i64 %authed
}

define i64 @test_ptrauth_auth_nop_mismatch(i8* %p) {
; CHECK-LABEL: @test_ptrauth_auth_nop_mismatch(
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint i8* [[P:%.*]] to i64
; CHECK-NEXT:    [[SIGNED:%.*]] = call i64 @llvm.ptrauth.sign(i64 [[TMP0]], i32 1, i64 1234)
; CHECK-NEXT:    [[AUTHED:%.*]] = call i64 @llvm.ptrauth.auth(i64 [[SIGNED]], i32 1, i64 10)
; CHECK-NEXT:    ret i64 [[AUTHED]]
;
  %tmp0 = ptrtoint i8* %p to i64
  %signed = call i64 @llvm.ptrauth.sign(i64 %tmp0, i32 1, i64 1234)
  %authed = call i64 @llvm.ptrauth.auth(i64 %signed, i32 1, i64 10)
  ret i64 %authed
}

define i64 @test_ptrauth_auth_nop_mismatch_keys(i8* %p) {
; CHECK-LABEL: @test_ptrauth_auth_nop_mismatch_keys(
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint i8* [[P:%.*]] to i64
; CHECK-NEXT:    [[SIGNED:%.*]] = call i64 @llvm.ptrauth.sign(i64 [[TMP0]], i32 0, i64 1234)
; CHECK-NEXT:    [[AUTHED:%.*]] = call i64 @llvm.ptrauth.auth(i64 [[SIGNED]], i32 1, i64 1234)
; CHECK-NEXT:    ret i64 [[AUTHED]]
;
  %tmp0 = ptrtoint i8* %p to i64
  %signed = call i64 @llvm.ptrauth.sign(i64 %tmp0, i32 0, i64 1234)
  %authed = call i64 @llvm.ptrauth.auth(i64 %signed, i32 1, i64 1234)
  ret i64 %authed
}

define i64 @test_ptrauth_auth_nop_global_mismatch() {
; CHECK-LABEL: @test_ptrauth_auth_nop_global_mismatch(
; CHECK-NEXT:    [[AUTHED:%.*]] = call i64 @llvm.ptrauth.auth(i64 ptrtoint ({ i8*, i32, i64, i64 }* @foo.ptrauth to i64), i32 1, i64 12)
; CHECK-NEXT:    ret i64 [[AUTHED]]
;
  %authed = call i64 @llvm.ptrauth.auth(i64 ptrtoint({ i8*, i32, i64, i64 }* @foo.ptrauth to i64), i32 1, i64 12)
  ret i64 %authed
}

define i64 @test_ptrauth_auth_nop_global_mismatch_key() {
; CHECK-LABEL: @test_ptrauth_auth_nop_global_mismatch_key(
; CHECK-NEXT:    [[AUTHED:%.*]] = call i64 @llvm.ptrauth.auth(i64 ptrtoint ({ i8*, i32, i64, i64 }* @foo.ptrauth to i64), i32 0, i64 1234)
; CHECK-NEXT:    ret i64 [[AUTHED]]
;
  %authed = call i64 @llvm.ptrauth.auth(i64 ptrtoint({ i8*, i32, i64, i64 }* @foo.ptrauth to i64), i32 0, i64 1234)
  ret i64 %authed
}

define i64 @test_ptrauth_auth_nop_global_addrdisc_mismatch() {
; CHECK-LABEL: @test_ptrauth_auth_nop_global_addrdisc_mismatch(
; CHECK-NEXT:    [[BLENDED:%.*]] = call i64 @llvm.ptrauth.blend(i64 ptrtoint (void ()* @foo to i64), i64 12)
; CHECK-NEXT:    [[AUTHED:%.*]] = call i64 @llvm.ptrauth.auth(i64 ptrtoint ({ i8*, i32, i64, i64 }* @foo.ptrauth.1 to i64), i32 1, i64 [[BLENDED]])
; CHECK-NEXT:    ret i64 [[AUTHED]]
;
  %addr = ptrtoint void()* @foo to i64
  %blended = call i64 @llvm.ptrauth.blend(i64 %addr, i64 12)
  %authed = call i64 @llvm.ptrauth.auth(i64 ptrtoint({ i8*, i32, i64, i64 }* @foo.ptrauth.1 to i64), i32 1, i64 %blended)
  ret i64 %authed
}

define i64 @test_ptrauth_auth_nop_global_addrdisc_mismatch2() {
; CHECK-LABEL: @test_ptrauth_auth_nop_global_addrdisc_mismatch2(
; CHECK-NEXT:    [[BLENDED:%.*]] = call i64 @llvm.ptrauth.blend(i64 ptrtoint (i64 (i8*)* @test_ptrauth_auth_nop to i64), i64 1234)
; CHECK-NEXT:    [[AUTHED:%.*]] = call i64 @llvm.ptrauth.auth(i64 ptrtoint ({ i8*, i32, i64, i64 }* @foo.ptrauth.1 to i64), i32 1, i64 [[BLENDED]])
; CHECK-NEXT:    ret i64 [[AUTHED]]
;
  %addr = ptrtoint i64(i8*)* @test_ptrauth_auth_nop to i64
  %blended = call i64 @llvm.ptrauth.blend(i64 %addr, i64 1234)
  %authed = call i64 @llvm.ptrauth.auth(i64 ptrtoint({ i8*, i32, i64, i64 }* @foo.ptrauth.1 to i64), i32 1, i64 %blended)
  ret i64 %authed
}

define i64 @test_ptrauth_auth_sign_resign(i8* %p) {
; CHECK-LABEL: @test_ptrauth_auth_sign_resign(
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint i8* [[P:%.*]] to i64
; CHECK-NEXT:    [[AUTHED:%.*]] = call i64 @llvm.ptrauth.sign(i64 [[TMP0]], i32 0, i64 42)
; CHECK-NEXT:    ret i64 [[AUTHED]]
;
  %tmp0 = ptrtoint i8* %p to i64
  %signed = call i64 @llvm.ptrauth.sign(i64 %tmp0, i32 1, i64 1234)
  %authed = call i64 @llvm.ptrauth.resign(i64 %signed, i32 1, i64 1234, i32 0, i64 42)
  ret i64 %authed
}

define i64 @test_ptrauth_auth_resign_ptrauth_global(i8* %p) {
; CHECK-LABEL: @test_ptrauth_auth_resign_ptrauth_global(
; CHECK:    ret i64 ptrtoint ({ i8*, i32, i64, i64 }* [[FOO_AUTH_42]] to i64)
;
  %tmp0 = ptrtoint i8* %p to i64
  %authed = call i64 @llvm.ptrauth.resign(i64 ptrtoint({ i8*, i32, i64, i64 }* @foo.ptrauth to i64), i32 1, i64 1234, i32 0, i64 42)
  ret i64 %authed
}

define i64 @test_ptrauth_auth_resign_resign(i8* %p) {
; CHECK-LABEL: @test_ptrauth_auth_resign_resign(
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint i8* [[P:%.*]] to i64
; CHECK-NEXT:    [[AUTHED:%.*]] = call i64 @llvm.ptrauth.resign(i64 [[TMP0]], i32 1, i64 1234, i32 1, i64 3141)
; CHECK-NEXT:    ret i64 [[AUTHED]]
;
  %tmp0 = ptrtoint i8* %p to i64
  %signed = call i64 @llvm.ptrauth.resign(i64 %tmp0, i32 1, i64 1234, i32 0, i64 42)
  %authed = call i64 @llvm.ptrauth.resign(i64 %signed, i32 0, i64 42, i32 1, i64 3141)
  ret i64 %authed
}

declare i64 @llvm.ptrauth.auth(i64, i32, i64)
declare i64 @llvm.ptrauth.sign(i64, i32, i64)
declare i64 @llvm.ptrauth.resign(i64, i32, i64, i32, i64)
declare i64 @llvm.ptrauth.blend(i64, i64)
